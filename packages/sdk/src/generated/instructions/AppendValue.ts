/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { AppendValueArgs, appendValueArgsBeet } from '../types/AppendValueArgs';

/**
 * @category Instructions
 * @category AppendValue
 * @category generated
 */
export type AppendValueInstructionArgs = {
  appendValueArgs: AppendValueArgs;
};
/**
 * @category Instructions
 * @category AppendValue
 * @category generated
 */
export const AppendValueStruct = new beet.FixableBeetArgsStruct<
  AppendValueInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['appendValueArgs', appendValueArgsBeet],
  ],
  'AppendValueInstructionArgs',
);
/**
 * Accounts required by the _AppendValue_ instruction
 *
 * @property [_writable_] jsonAccount The account to store the metadata in.
 * @property [_writable_] jsonMetadataAccount The account to store the json account's metadata in.
 * @property [_writable_, **signer**] payer The account that will pay for the transaction and rent.
 * @category Instructions
 * @category AppendValue
 * @category generated
 */
export type AppendValueInstructionAccounts = {
  jsonAccount: web3.PublicKey;
  jsonMetadataAccount: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const appendValueInstructionDiscriminator = 3;

/**
 * Creates a _AppendValue_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AppendValue
 * @category generated
 */
export function createAppendValueInstruction(
  accounts: AppendValueInstructionAccounts,
  args: AppendValueInstructionArgs,
  programId = new web3.PublicKey('jsonDR1w3Dp3aBiVFcbUGfKFyNmUD65wwveiVG6DUnU'),
) {
  const [data] = AppendValueStruct.serialize({
    instructionDiscriminator: appendValueInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.jsonAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.jsonMetadataAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
